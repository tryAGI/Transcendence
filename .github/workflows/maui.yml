name: Build, test and publish MAUI application
on:
  workflow_call:
    inputs:
      application-name:
        required: true
        type: string
      package-name:
        required: true
        type: string
      path:
        required: true
        type: string
      project-name:
        required: true
        type: string
      environment:
        required: false
        type: string
        default: staging

jobs:
  build-and-test:
    name: Build and test
    runs-on: windows-latest
    outputs:
      version: ${{ steps.compute_version.outputs.version }}
    env:
      TF_BUILD: true
    steps:
      - name: Getting code
        uses: actions/checkout@v4

      - name: Install workloads
        run: dotnet workload install maui

      - name: Compute version
        id: compute_version
        shell: bash
        run: |
          if [[ "${{ github.event.ref }}" == refs/tags/v* ]]; then
            VERSION="${{ github.event.ref }}"
            VERSION="${VERSION#refs/tags/v}"
          else
            VERSION=$(dotnet msbuild ${{ inputs.path }} -getProperty:ApplicationDisplayVersion)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Install Tizen workload
        run: |
          Invoke-WebRequest 'https://raw.githubusercontent.com/Samsung/Tizen.NET/main/workload/scripts/workload-install.ps1' -OutFile 'workload-install.ps1'
          ./workload-install.ps1

      - name: Build using dotnet
        run: dotnet build
          --configuration Debug
          --nologo

      - name: Run tests
        run: dotnet test
          --configuration Debug
          --nologo
        
  publish-android:
    name: Create Android artifacts
    needs: build-and-test
    runs-on: windows-latest
    steps:
      - name: Getting code
        uses: actions/checkout@v4

      - name: Install workloads
        run: dotnet workload install maui-android

      - name: Decode keystore from base64 and save to file
        env:
          SIGNING_KEY_STORE_BASE64: ${{ secrets.ANDROID_SIGNING_KEY_STORE_BASE64 }}
        run: |
          $bytes = [System.Convert]::FromBase64String($Env:SIGNING_KEY_STORE_BASE64)
          [System.IO.File]::WriteAllBytes('${{ inputs.path }}/keystore.keystore', $bytes)
        shell: pwsh

      - name: Publish
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: dotnet publish
          ${{ inputs.path }}
          --output publish
          -p:TargetFrameworks=net8.0-android
          --framework:net8.0-android
          --nologo
          -p:ApplicationDisplayVersion="${{ needs.build-and-test.outputs.version }}"
          -p:ApplicationVersion="${{ github.run_number }}"
          -p:AndroidKeyStore=true
          -p:AndroidSigningKeyStore=keystore.keystore
          -p:AndroidSigningKeyAlias=${{ secrets.ANDROID_SIGNING_KEY_ALIAS }}
          -p:AndroidSigningKeyPass=${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}
          -p:AndroidSigningStorePass=${{ secrets.ANDROID_SIGNING_STORE_PASSWORD }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android
          path: publish
  
  publish-ios:
    name: Create iOS artifacts
    needs: build-and-test
    environment: ${{ inputs.environment }}
    runs-on: macos-latest
    steps:
      - name: Getting code
        uses: actions/checkout@v4
          
      - name: Install workloads
        run: dotnet workload install maui-ios

      # https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPLE_P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.APPLE_BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
      - name: Publish
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: dotnet publish
          ${{ inputs.path }}
          --output publish
          -p:TargetFrameworks=net8.0-ios
          --framework:net8.0-ios
          --nologo
          -p:ApplicationDisplayVersion="${{ needs.build-and-test.outputs.version }}"
          -p:ApplicationVersion="${{ github.run_number }}"
          -p:ArchiveOnBuild=true
          -p:CodesignKey="${{ secrets.APPLE_CODESIGN_KEY }}"
          -p:CodesignProvision="${{ secrets.APPLE_CODESIGN_PROVISION }}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios
          path: publish

  publish-ios-to-testflight:
    name: Publish to TestFlight
    needs: publish-ios
    continue-on-error: true
    runs-on: macos-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ios

      - name: Decode base64 private key and save to file
        env:
          API_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY_BASE64 }}
        run: |
          mkdir -p ./private_keys
          echo -n "$API_KEY_BASE64" | base64 --decode -o "./private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_KEY_ID }}.p8"

      - name: Validate app
        run: xcrun altool
          --validate-app
          -f ${{ inputs.project-name }}.ipa
          -t ios
          --apiKey ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          --apiIssuer ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}

      - name: Upload to TestFlight
        run: xcrun altool
          --upload-app
          -f ${{ inputs.project-name }}.ipa
          -t ios
          --apiKey ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          --apiIssuer ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
  
  publish-maccatalyst:
    name: Create MacCatalyst artifacts
    needs: build-and-test
    environment: ${{ inputs.environment }}
    runs-on: macos-latest
    steps:
      - name: Getting code
        uses: actions/checkout@v4

      - name: Install workloads
        run: dotnet workload install maui-maccatalyst

      # Available Xcode version: https://github.com/actions/runner-images/blob/main/images/macos/macos-14-arm64-Readme.md#xcode
      - name: Use latest Xcode
        run: sudo xcode-select --switch /Applications/Xcode_16.0.app

      # https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_BUILD_CERTIFICATE_BASE64 }}
          INSTALLER_CERTIFICATE_BASE64: ${{ secrets.MAC_INSTALLER_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPLE_P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MACCATALYST_BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          INSTALLER_CERTIFICATE_PATH=$RUNNER_TEMP/installer_build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.provisionprofile
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$INSTALLER_CERTIFICATE_BASE64" | base64 --decode -o $INSTALLER_CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $INSTALLER_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Publish
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: dotnet publish
          ${{ inputs.path }}
          --output publish
          -p:TargetFrameworks=net8.0-maccatalyst
          --framework:net8.0-maccatalyst
          --nologo
          -p:ApplicationDisplayVersion="${{ needs.build-and-test.outputs.version }}"
          -p:ApplicationVersion="${{ github.run_number }}"
          -p:CodesignKey="${{ secrets.APPLE_CODESIGN_KEY }}"
          -p:CodesignProvision="${{ secrets.MACCATALYST_CODESIGN_PROVISION }}"
          -p:CreatePackage=true
          -p:UseHardenedRuntime=true
          -p:MtouchLink=SdkOnly
          -p:EnableCodeSigning=true
          -p:EnablePackageSigning=true
          -p:PackageSigningKey="${{ secrets.MACCATALYST_PACKAGE_SIGNING_KEY }}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: maccatalyst
          path: publish
  
  publish-maccatalyst-to-testflight:
    name: Publish to TestFlight
    needs: [ build-and-test, publish-maccatalyst ]
    continue-on-error: true
    runs-on: macos-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: maccatalyst

      - name: Decode base64 private key and save to file
        env:
          API_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY_BASE64 }}
        run: |
          mkdir -p ./private_keys
          echo -n "$API_KEY_BASE64" | base64 --decode -o "./private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_KEY_ID }}.p8"

      - name: Validate app
        run: xcrun altool
          --validate-app
          -f ${{ inputs.project-name }}-${{ needs.build-and-test.outputs.version }}.pkg
          -t macos
          --apiKey ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          --apiIssuer ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}

      - name: Upload to TestFlight
        run: xcrun altool
          --upload-app
          -f ${{ inputs.project-name }}-${{ needs.build-and-test.outputs.version }}.pkg
          -t macos
          --apiKey ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          --apiIssuer ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
  
  publish-maccatalyst-non-appstore:
    name: Create MacCatalyst non-appstore artifacts
    needs: build-and-test
    environment: ${{ inputs.environment }}
    runs-on: macos-latest
    steps:
      - name: Getting code
        uses: actions/checkout@v4

      - name: Install workloads
        run: dotnet workload install maui-maccatalyst

      # Available Xcode version: https://github.com/actions/runner-images/blob/main/images/macos/macos-14-arm64-Readme.md#xcode
      - name: Use latest Xcode
        run: sudo xcode-select --switch /Applications/Xcode_16.0.app

      # https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.MACCATALYST_NON_APP_STORE_BUILD_CERTIFICATE_BASE64 }}
          INSTALLER_CERTIFICATE_BASE64: ${{ secrets.MACCATALYST_NON_APP_STORE_INSTALLER_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPLE_P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MACCATALYST_NON_APP_STORE_BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          INSTALLER_CERTIFICATE_PATH=$RUNNER_TEMP/installer_build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.provisionprofile
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$INSTALLER_CERTIFICATE_BASE64" | base64 --decode -o $INSTALLER_CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $INSTALLER_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Publish
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: dotnet publish
          ${{ inputs.path }}
          --output publish
          -p:TargetFrameworks=net8.0-maccatalyst
          --framework:net8.0-maccatalyst
          --nologo
          -p:ApplicationDisplayVersion="${{ needs.build-and-test.outputs.version }}"
          -p:ApplicationVersion="${{ github.run_number }}"
          -p:CreatePackage=true
          -p:UseHardenedRuntime=true
          -p:MtouchLink=SdkOnly
          -p:EnableCodeSigning=true
          -p:EnablePackageSigning=true
          -p:PublishOutsideMacAppStore=true
          -p:CodesignKey="${{ secrets.MACCATALYST_NON_APP_STORE_CODESIGN_KEY }}"
          -p:CodesignProvision="${{ secrets.MACCATALYST_NON_APP_STORE_CODESIGN_PROVISION }}"
          -p:PackageSigningKey="${{ secrets.MACCATALYST_NON_APP_STORE_PACKAGE_SIGNING_KEY }}"
       
      - name: Rename .pkg file
        run: mv
          publish/${{ inputs.project-name }}-${{ needs.build-and-test.outputs.version }}.pkg
          publish/${{ inputs.project-name }}-${{ needs.build-and-test.outputs.version }}.${{ github.run_number }}.pkg

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: maccatalyst-non-appstore
          path: publish
  
  notarize-maccatalyst-non-appstore:
    name: Notarize Non-AppStore MacCatalyst artifacts
    needs: [ build-and-test, publish-maccatalyst-non-appstore ]
    outputs:
      submission_id: ${{ steps.notarize.outputs.submission_id }}
    continue-on-error: true
    runs-on: macos-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: maccatalyst-non-appstore

      - name: Decode base64 private key and save to file
        env:
          API_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY_BASE64 }}
        run: |
          mkdir -p ./private_keys
          echo -n "$API_KEY_BASE64" | base64 --decode -o "./private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_KEY_ID }}.p8"
          
      - name: Submit to Apple's notary service
        id: notarize
        run: |
          OUTPUT=$(xcrun notarytool \
            submit \
            ${{ inputs.project-name }}-${{ needs.build-and-test.outputs.version }}.${{ github.run_number }}.pkg \
            --key "./private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_KEY_ID }}.p8" \
            --key-id ${{ secrets.APP_STORE_CONNECT_KEY_ID }} \
            --issuer ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }})
          echo "$OUTPUT"
          SUBMISSION_ID=$(echo "$OUTPUT" | awk '/id: /{print $2; exit}')
          echo "submission_id=$SUBMISSION_ID" >> $GITHUB_OUTPUT

#      - name: Wait notarization
#        run: xcrun notarytool
#          wait
#          ${{ steps.notarize.outputs.submission_id }}
#          --key "./private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_KEY_ID }}.p8"
#          --key-id ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
#          --issuer ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
  
  wait-notarize-maccatalyst-non-appstore:
    name: Wait notarization Non-AppStore MacCatalyst artifacts
    needs: [ notarize-maccatalyst-non-appstore ]
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      - name: Wait notarization
        run: sleep 3600

  notarize-maccatalyst-non-appstore-info:
    name: Notarize Non-AppStore MacCatalyst artifacts
    needs: [ build-and-test, notarize-maccatalyst-non-appstore, wait-notarize-maccatalyst-non-appstore ]
    continue-on-error: true
    runs-on: macos-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: maccatalyst-non-appstore

      - name: Decode base64 private key and save to file
        env:
          API_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY_BASE64 }}
        run: |
          mkdir -p ./private_keys
          echo -n "$API_KEY_BASE64" | base64 --decode -o "./private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_KEY_ID }}.p8"
          
      - name: Show notarization info
        run: xcrun notarytool
          info
          ${{ needs.notarize-maccatalyst-non-appstore.outputs.submission_id }}
          --key "./private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_KEY_ID }}.p8"
          --key-id ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          --issuer ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}

      - name: Show notarization log
        run: xcrun notarytool
          log
          ${{ needs.notarize-maccatalyst-non-appstore.outputs.submission_id }}
          --key "./private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_KEY_ID }}.p8"
          --key-id ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          --issuer ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}

      - name: Staple the ticket to your app and validate notarization
        run: xcrun stapler
          staple
          ${{ inputs.project-name }}-${{ needs.build-and-test.outputs.version }}.${{ github.run_number }}.pkg
  
  publish-windows-packaged:
    name: Create Windows(Packaged) artifacts
    needs: build-and-test
    environment: ${{ inputs.environment }}
    runs-on: windows-latest
    steps:
      - name: Getting code
        uses: actions/checkout@v4

      - name: Install workloads
        run: dotnet workload install maui-windows

      - name: Decrypt PFX File
        run: |
          echo "${{ secrets.WINDOWS_PFX_FILE }}" > cert.pfx.asc
          certutil -decode cert.pfx.asc cert.pfx

      - name: Add Cert to Store
        run: |
          $password = '${{ secrets.WINDOWS_PFX_PASSWORD }}'
          certutil -user -q -p $password -importpfx cert.pfx NoRoot
        shell: pwsh

      - name: Publish
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: dotnet publish
          ${{ inputs.path }}
          --output publish
          -p:TargetFrameworks=net8.0-windows10.0.19041.0
          --framework:net8.0-windows10.0.19041.0
          --nologo
          -p:ApplicationDisplayVersion="${{ needs.build-and-test.outputs.version }}"
          -p:ApplicationVersion="${{ github.run_number }}"
          -p:RuntimeIdentifierOverride=win10-x64
          -p:AppxPackageSigningEnabled=true
          -p:PackageCertificateThumbprint="${{ secrets.WINDOWS_PFX_THUMBPRINT }}"
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-packaged
          path: src\${{ inputs.project-name }}\bin\Release\net8.0-windows10.0.19041.0\win10-x64\AppPackages\${{ inputs.project-name }}_${{ needs.build-and-test.outputs.version }}.0.${{ github.run_number }}_Test

  publish-windows-to-store:
    name: Create Windows(Packaged) artifacts for Store
    needs: build-and-test
    environment: ${{ inputs.environment }}
    runs-on: windows-latest
    steps:
      - name: Getting code
        uses: actions/checkout@v4

      - name: Install workloads
        run: dotnet workload install maui-windows

      - name: Replace appxmanifest
        run: cp
          src/Transcendence/Platforms/Windows/Package.Store.appxmanifest
          src/Transcendence/Platforms/Windows/Package.appxmanifest

      - name: Publish
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: dotnet publish
          ${{ inputs.path }}
          --output publish
          -p:TargetFrameworks=net8.0-windows10.0.19041.0
          --framework:net8.0-windows10.0.19041.0
          --nologo
          -p:ApplicationDisplayVersion="${{ needs.build-and-test.outputs.version }}.${{ github.run_number }}"
          -p:ApplicationVersion="0" # Package acceptance validation error: Apps are not allowed to have a Version with a revision number other than zero specified in the app manifest.
          -p:RuntimeIdentifierOverride=win10-x64

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-packaged-for-store
          path: src\${{ inputs.project-name }}\bin\Release\net8.0-windows10.0.19041.0\win10-x64\AppPackages\${{ inputs.project-name }}_${{ needs.build-and-test.outputs.version }}.${{ github.run_number }}.0_Test

  publish-windows-unpackaged:
    name: Create Windows(Unpackaged) artifacts
    needs: build-and-test
    environment: ${{ inputs.environment }}
    runs-on: windows-latest
    steps:
      - name: Getting code
        uses: actions/checkout@v4

      - name: Install workloads
        run: dotnet workload install maui-windows

      - name: Publish
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: dotnet publish
          ${{ inputs.path }}
          --output publish
          -p:TargetFrameworks=net8.0-windows10.0.19041.0
          --framework:net8.0-windows10.0.19041.0
          --nologo
          -p:ApplicationDisplayVersion="${{ needs.build-and-test.outputs.version }}"
          -p:ApplicationVersion="${{ github.run_number }}"
          -p:RuntimeIdentifierOverride=win10-x64
          -p:WindowsPackageType=None
          -p:WindowsAppSDKSelfContained=true
          -p:PublishSingleFile=true
          -p:PublishReadyToRun=true
          -p:SelfContained=true
          -p:IncludeNativeLibrariesForSelfExtract=true
          -p:EnableCompressionInSingleFile=true
          #-p:PublishTrimmed=true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-unpackaged
          path: publish
  
  create-github-release:
    name: Create Github Release
    needs: [ build-and-test, publish-android, publish-ios, publish-maccatalyst-non-appstore, publish-windows-packaged, publish-windows-unpackaged ]
    runs-on: ubuntu-latest
    steps:
      - name: Getting code
        uses: actions/checkout@v4
        
      - uses: actions/download-artifact@v4
        with:
          name: android

      - uses: actions/download-artifact@v4
        with:
          name: ios

      - uses: actions/download-artifact@v4
        with:
          name: maccatalyst-non-appstore

      - uses: actions/download-artifact@v4
        with:
          name: windows-packaged

      - uses: actions/download-artifact@v4
        with:
          name: windows-unpackaged

      - name: Create GitHub release
        if: startsWith(github.event.ref, 'refs/tags/v')
        run: gh release create
          v${{ needs.build-and-test.outputs.version }}.${{ github.run_number }}
          ${{ inputs.package-name }}-Signed.apk
          ${{ inputs.package-name }}-Signed.aab
          ${{ inputs.project-name }}.ipa
          ${{ inputs.project-name }}-${{ needs.build-and-test.outputs.version }}.${{ github.run_number }}.pkg
          ${{ inputs.project-name }}.exe
          ${{ inputs.project-name }}_${{ needs.build-and-test.outputs.version }}.0.${{ github.run_number }}_x64.msix
          ${{ inputs.project-name }}_${{ needs.build-and-test.outputs.version }}.0.${{ github.run_number }}_x64.cer
          --title "Release V${{ needs.build-and-test.outputs.version }}.${{ github.run_number }}"
          --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub release
        if: ${{ !startsWith(github.event.ref, 'refs/tags/v') }}
        run: gh release create
          v${{ needs.build-and-test.outputs.version }}.${{ github.run_number }}-prerelease
          ${{ inputs.package-name }}-Signed.apk
          ${{ inputs.package-name }}-Signed.aab
          ${{ inputs.project-name }}.ipa
          ${{ inputs.project-name }}-${{ needs.build-and-test.outputs.version }}.${{ github.run_number }}.pkg
          ${{ inputs.project-name }}.exe
          ${{ inputs.project-name }}_${{ needs.build-and-test.outputs.version }}.0.${{ github.run_number }}_x64.msix
          ${{ inputs.project-name }}_${{ needs.build-and-test.outputs.version }}.0.${{ github.run_number }}_x64.cer
          --prerelease
          --title "Prerelease V${{ needs.build-and-test.outputs.version }}.${{ github.run_number }}"
          --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}